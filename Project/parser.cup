/*
   Simple +/-/* expression language; 
   parser evaluates constant expressions on the fly
*/

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;

parser code {:
  protected Lexer lexer;
:}

/* define how to connect to the scanner! */
init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);
:};
scan with {: return lexer.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal SEMI, PLUS, MINUS, UMINUS, TIMES, DIVIDE;
terminal LPAREN, RPAREN, LBRACE, RBRACE, LSQBRAKE, RSQBRAKE;
terminal COMMA, AND, OR, ASSIGN, NOTEQUAL, EQUALEQUAL, LESSEQUAL, GREATEQUAL, LESSER, GREATER;
terminal ANDAND, OROR, IF, ELSE, WHILE, RETURN, CIN, COUT, READ, WRITE;
terminal TRUE, FALSE, VOID, INT, BOOL;
terminal Integer INTLITERAL, NUMBER;
terminal String STRINGLITERAL;  // Added STRINGLITERAL terminal
terminal String ID;

/* Non terminals */
non terminal program, stmt, stmt_list, expr_list, varDecl, fnDecl, parameters, formalDecl, formalsList, block, decl_list;
non terminal Integer expr;  // used to store evaluated subexpressions
non terminal type;  // Declaration of the 'type' non-terminal
non terminal subscriptExpr; // Declaration of the 'subscriptExpr' non-terminal
non terminal fnCallStmt, fnCallExpr, atom, id;
non terminal actualList;

/* Precedences */
precedence left OR, OROR;
precedence left AND, ANDAND;
precedence left EQUALEQUAL, NOTEQUAL, LESSEQUAL, GREATEQUAL, LESSER, GREATER;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence left UMINUS;
        
// The grammar rules
program ::= program varDecl								{: System.out.println("Program 1(varDecl)"); :}
          | program fnDecl								{: System.out.println("Program 2(fnDecl)"); :}
          | // empty
          ;
          
varDecl ::= type ID SEMI								{: System.out.println("varDecl 1"); :}
          | type ID LSQBRAKE NUMBER RSQBRAKE SEMI		{: System.out.println("varDecl 2"); :}
          ;
          
type ::= INT											{: System.out.println("type 1(INT value)"); :}
       | BOOL											{: System.out.println("type 2(BOOL value)"); :}
       | VOID											{: System.out.println("type 3(VOID value)"); :}
       ;
       
fnDecl ::= type ID parameters block						{: System.out.println("fnDecl 1"); :}
         ;
         
parameters ::= LPAREN RPAREN							{: System.out.println("parameters 1"); :}
             | LPAREN formalsList RPAREN				{: System.out.println("parameters 2"); :}
             ;
             
formalsList ::= formalDecl								{: System.out.println("formalsList 1"); :}
              | formalsList COMMA formalDecl			{: System.out.println("formalsList 2"); :}
              ;
              
formalDecl ::= type ID									{: System.out.println("formalDecl 1"); :}
             ;
             
block ::= LBRACE decl_list stmt_list RBRACE				{: System.out.println("block 1"); :}
        ;
        
decl_list ::= decl_list varDecl							{: System.out.println("decl_list 1"); :}
            | // empty
            ;
            
stmt_list ::= stmt_list stmt							{: System.out.println("stmt_list 1"); :}
            | // empty
            ;
            
// Statement grammar 
stmt ::= CIN READ ID SEMI								{: System.out.println("stmt 1"); :}
       | CIN READ ID LSQBRAKE expr:e RSQBRAKE SEMI		{: System.out.println("stmt 2 reads " + e); :}
       | COUT WRITE expr:e SEMI							{: System.out.println("stmt 3 writes " + e); :}
       | ID ASSIGN expr:e SEMI							{: System.out.println("stmt 4 expr=" + e); :}
       | subscriptExpr ASSIGN expr:e SEMI				{: System.out.println("stmt 5"); :}
       | IF LPAREN expr:e RPAREN block					{: System.out.println("stmt 6"); :}
       | IF LPAREN expr:e RPAREN block ELSE block		{: System.out.println("stmt 7"); :}
       | WHILE LPAREN expr:e RPAREN block				{: System.out.println("stmt 8"); :}
       | RETURN expr:e SEMI								{: System.out.println("stmt 9"); :}
       | RETURN SEMI									{: System.out.println("stmt 10"); :}
       | fnCallStmt SEMI								{: System.out.println("stmt 11"); :}
       ;            

expr_list ::= expr_list expr:e SEMI         {: System.out.println(e); :}
            | expr:e SEMI                   {: System.out.println(e); :}
            ;
            
/* Expression grammar */
expr ::= expr:e1 PLUS expr:e2             {: RESULT = e1 + e2; :}
       | expr:e1 MINUS expr:e2            {: RESULT = e1 - e2; :}
       | expr:e1 TIMES expr:e2            {: RESULT = e1 * e2; :}
       | expr:e1 DIVIDE expr:e2            {: RESULT = e1 / e2; :}
       | expr:e1 AND expr:e2              {: RESULT = e1 & e2; :}
       | expr:e1 OR expr:e2               {: RESULT = e1 | e2; :}
       | expr:e1 ANDAND expr:e2           {: RESULT = (e1 != 0 && e2 != 0) ? 1 : 0; :}
       | expr:e1 OROR expr:e2             {: RESULT = (e1 != 0 || e2 != 0) ? 1 : 0; :}
       | expr:e1 EQUALEQUAL expr:e2       {: RESULT = (e1 == e2) ? 1 : 0; :}
       | expr:e1 NOTEQUAL expr:e2         {: RESULT = (e1 != e2) ? 1 : 0; :}
       | expr:e1 LESSEQUAL expr:e2        {: RESULT = (e1 <= e2) ? 1 : 0; :}
       | expr:e1 GREATEQUAL expr:e2       {: RESULT = (e1 >= e2) ? 1 : 0; :}
       | expr:e1 LESSER expr:e2           {: RESULT = (e1 < e2) ? 1 : 0; :}
       | expr:e1 GREATER expr:e2           {: RESULT = (e1 > e2) ? 1 : 0; :}
       | MINUS expr:e                     {: RESULT = -e; :} %prec UMINUS
       | LPAREN expr:e RPAREN             {: RESULT = e; :}
       | NUMBER:n                        {: RESULT = n; :}  // ((Integer)n).intValue(); Explicit cast to Integer
       | TRUE                            {: RESULT = 1; :}
       | FALSE                           {: RESULT = 0; :}
       | ID								{: RESULT = 0;	:}
       ;
             
/* Subscript and function call grammar */
atom		::=	INTLITERAL							{: System.out.println("atom 1"); :}
			|	STRINGLITERAL						{: System.out.println("atom 2"); :}
			|	TRUE								{: System.out.println("atom 3"); :}
			|	FALSE								{: System.out.println("atom 4"); :}
			|	LPAREN	actualList	RPAREN			{: System.out.println("atom 5"); :}
			|	subscriptExpr						{: System.out.println("atom 6"); :}
			|	id									{: System.out.println("atom 7"); :}
            ;
            
fnCallExpr ::= ID LPAREN RPAREN						{: System.out.println("fnCallExpr 1"); :}
             | ID LPAREN actualList RPAREN			{: System.out.println("fnCallExpr 2"); :}
             ;
             
fnCallStmt ::= ID LPAREN RPAREN						{: System.out.println("fnCallStmt 1"); :}
             | ID LPAREN actualList RPAREN			{: System.out.println("fnCallStmt 2"); :}
             ;
             
actualList ::= expr									{: System.out.println("actualList 1"); :}
             | actualList COMMA expr				{: System.out.println("actualList 2"); :}
             ;
             
subscriptExpr ::= ID LSQBRAKE expr RSQBRAKE			{: System.out.println("subscriptExpr 1"); :}
                ;
                
id			::= ID									{: System.out.println("id 1"); :}
			;
       