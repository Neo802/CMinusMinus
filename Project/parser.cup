/*
   Simple +/-/* expression language; 
   parser evaluates constant expressions on the fly
*/

package cup.example;

import classes.Sum;
import classes.TreeNode;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;

parser code {:
  	protected Lexer lexer;
  	protected TreeNode parseTreeRoot = null;
	public TreeNode getParseTree(){
		return parseTreeRoot;
	}
:}

/* define how to connect to the scanner! */
init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);
:};
scan with {: return lexer.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal SEMI, PLUS, MINUS, UMINUS, TIMES, DIVIDE;
terminal LPAREN, RPAREN, LBRACE, RBRACE, LSQBRAKE, RSQBRAKE;
terminal COMMA, AND, OR, ASSIGN, NOTEQUAL, EQUALEQUAL, LESSEQUAL, GREATEQUAL, LESSER, GREATER;
terminal ANDAND, OROR, IF, ELSE, WHILE, RETURN, CIN, COUT, READ, WRITE;
terminal TRUE, FALSE, VOID, INT, BOOL, NOT;
terminal Integer INTLITERAL, NUMBER;
terminal String STRINGLITERAL;  // Added STRINGLITERAL terminal
terminal String ID;

/* Non terminals */
non terminal TreeNode program;
non terminal TreeNode stmt;
non terminal TreeNode stmt_list;
non terminal TreeNode expr_list;
non terminal TreeNode varDecl;
non terminal TreeNode fnDecl;
non terminal TreeNode parameters;
non terminal TreeNode formalDecl;
non terminal TreeNode formalsList;
non terminal TreeNode block;
non terminal TreeNode decl_list;

non terminal TreeNode expr;  // used to store evaluated subexpressions

non terminal TreeNode type;  // Declaration of the 'type' non-terminal
non terminal TreeNode subscriptExpr; // Declaration of the 'subscriptExpr' non-terminal
non terminal TreeNode fnCallStmt;
non terminal TreeNode fnCallExpr;
non terminal TreeNode atom;
non terminal TreeNode id;
non terminal TreeNode actualList;

/* Precedences */
precedence left OR, OROR;
precedence left AND, ANDAND;
precedence left EQUALEQUAL, NOTEQUAL, LESSEQUAL, GREATEQUAL, LESSER, GREATER;
precedence left PLUS, MINUS;	
precedence left TIMES, DIVIDE;
precedence left UMINUS;
        
// The grammar rules
program ::= program:p varDecl:vd				{: 													
													p.addChild(vd);													 
													RESULT = p;
												:}
  		| program:p fnDecl:fd					{:													
													p.addChild(fd);													 
													RESULT = p;
												:}
  		| 										{:
													parseTreeRoot = new TreeNode("Program");
													RESULT = parseTreeRoot;  
												:}
		;
          
varDecl ::= type:t id:i SEMI					{:
													TreeNode result = new TreeNode("VarDecl");
													result.addChild(i);
													result.addChild(t);
													RESULT = result; 
											    :}
          | type:t id:i LSQBRAKE NUMBER:n RSQBRAKE SEMI		
          										{: 
													TreeNode result = new TreeNode("VarDecl" + "[" + n + "]");
													result.addChild(i);
													result.addChild(t);
													RESULT = result;
												:}
          ;
          
type ::= INT											{: 
															RESULT = new TreeNode("TYPE");
														   	RESULT.addChild(new TreeNode("INT"));
													 	:}
       | BOOL											{: 
															RESULT = new TreeNode("TYPE");
														   	RESULT.addChild(new TreeNode("BOOL"));
													 	:}
       | VOID											{: 
															RESULT = new TreeNode("TYPE");
														   	RESULT.addChild(new TreeNode("VOID"));
													 	:}
       ;
       
fnDecl ::= type:t id:i parameters:p block:b				{: 
															TreeNode result = new TreeNode("Function");
															result.addChild(t);
															result.addChild(i);
															result.addChild(p);
															result.addChild(b);
															RESULT = result; 
														:}
         ;
         
parameters ::= LPAREN RPAREN							{: 
															TreeNode result = new TreeNode("No Parameter");
															RESULT = result; 
														:}
             | LPAREN formalsList:fl RPAREN				{: 
															TreeNode result = new TreeNode("Parameters");
															result.addChild(fl);
															RESULT = result; 
														:}
             ;
             
formalsList ::= formalDecl:fd							{: 
															TreeNode result = new TreeNode("Formal Decl");
															result.addChild(fd);
															RESULT = result;  
														:}
              | formalsList:fl COMMA formalDecl:fd		{: 
															fl.addChild(fd);
															RESULT = fl;
														:}
              ;
              
formalDecl ::= type:t id:i								{: 
															TreeNode result = new TreeNode("Formal Declaration");
															result.addChild(i);
															result.addChild(t);
															RESULT = result;
														:}
             ;
             
block ::= LBRACE decl_list:dl stmt_list:sl RBRACE		{: 
															TreeNode result = new TreeNode("block");
															result.addChild(dl);
															result.addChild(sl);
															RESULT = result;
														:}
        ;
        
decl_list ::= decl_list:dl varDecl:vd					{: 
															dl.addChild(vd);
															RESULT = dl;	 
														:}
            | 											{: 
															TreeNode result = new TreeNode("Declaration List");
															RESULT = result; 
														:}
            ;
            
stmt_list ::= stmt_list:sl stmt:s						{: 
															sl.addChild(s);
															RESULT = sl;
														:}
            | 											{: 
															TreeNode result = new TreeNode("Statement List");
															RESULT = result; 
														:}
            ;
            
// Statement grammar 
stmt ::= CIN READ id:i SEMI								{: 
															TreeNode result = new TreeNode("STMT - CIN READ");
															result.addChild(i);
															RESULT = result;
														:}
       | CIN READ id:i LSQBRAKE expr:e RSQBRAKE SEMI	{: 
															TreeNode result = new TreeNode("STMT - CIN READ EXPR");
															result.addChild(i); 
															result.addChild(e);
															RESULT = result;
														:}
       | COUT WRITE expr:e SEMI							{: 
															TreeNode result = new TreeNode("STMT - COUT WRITE");
															result.addChild(e);
															RESULT = result;
														:}
       | id:i ASSIGN expr:e SEMI						{: 
															//TreeNode result = new TreeNode("STMT - ASSIGN");
															//result.addChild(i); 
															i.addChild(e);
															RESULT = i;
														:}
       | subscriptExpr:se ASSIGN expr:e SEMI			{: 
															se.addChild(e); 
															RESULT = se;
														:}
       | IF LPAREN expr:e RPAREN block:b				{: 
															TreeNode result = new TreeNode("STMT - IF");
															result.addChild(e); 
															result.addChild(b);
															RESULT = result;
														:}
       | IF LPAREN expr:e RPAREN block:b ELSE block:b2	{: 
															TreeNode result = new TreeNode("STMT - IF ELSE");
															result.addChild(e); 
															result.addChild(b);
															result.addChild(b2);
															RESULT = result;
														:}
       | WHILE LPAREN expr:e RPAREN block:b				{: 
															TreeNode result = new TreeNode("STMT - WHILE");
															result.addChild(e); 
															result.addChild(b);
															RESULT = result;
														:}
       | RETURN expr:e SEMI								{: 
															TreeNode result = new TreeNode("STMT - RETURN");
															result.addChild(e); 
															RESULT = result;
														:}
       | RETURN SEMI									{: 
															TreeNode result = new TreeNode("STMT - RETURN NIL");
															RESULT = result;
														:}
       | fnCallStmt:fcs SEMI							{: 
															RESULT = fcs;
														:}
       ;            

expr_list ::= expr_list:el expr:e SEMI      {: 
												el.addChild(e);
												RESULT = el; 
											:}
            | expr:e SEMI                   {: 
												TreeNode result = new TreeNode("Expression List");
												result.addChild(e);
												RESULT = result;
											:}
            ;
            
/* Expression grammar */
expr ::= expr:e1 PLUS expr:e2             	{: 
												TreeNode result = new TreeNode("SUM");
												result.addChild(e1);
												result.addChild(e2);
												RESULT = result;
											:} //{: RESULT = new Sum().Add(e1, e2); :}// {: RESULT = e1 + e2; :}
       | expr:e1 MINUS expr:e2            	{: 
												TreeNode result = new TreeNode("DIFFERENCE");
												result.addChild(e1);
												result.addChild(e2);
												RESULT = result;
											:} //{: RESULT = e1 - e2; :}
       | expr:e1 TIMES expr:e2            	{: 
												TreeNode result = new TreeNode("TIMES");
												result.addChild(e1);
												result.addChild(e2);
												RESULT = result;
											:} //{: RESULT = e1 * e2; :}
       | expr:e1 DIVIDE expr:e2            	{: 
												TreeNode result = new TreeNode("DIVIDE");
												result.addChild(e1);
												result.addChild(e2);
												RESULT = result;
											:} //{: RESULT = e1 / e2; :}
       | NOT expr:e                     	{:	
												TreeNode result = new TreeNode("NOT");
												result.addChild(e);
												RESULT = result;
											:}
       | expr:e1 ANDAND expr:e2           	{: 
												TreeNode result = new TreeNode("AND AND");
												result.addChild(e1);
												result.addChild(e2);
												RESULT = result;
											:} //{: RESULT = (e1 != 0 && e2 != 0) ? 1 : 0; :}
       | expr:e1 OROR expr:e2             	{: 
												TreeNode result = new TreeNode("OR OR");
												result.addChild(e1);
												result.addChild(e2);
												RESULT = result;
											:} //{: RESULT = (e1 != 0 || e2 != 0) ? 1 : 0; :}
       | expr:e1 EQUALEQUAL expr:e2       	{: 
												TreeNode result = new TreeNode("Equality");
												result.addChild(e1);
												result.addChild(e2);
												RESULT = result;
											:} //{: RESULT = (e1 == e2) ? 1 : 0; :}
       | expr:e1 NOTEQUAL expr:e2         	{: 
												TreeNode result = new TreeNode("Not Equal");
												result.addChild(e1);
												result.addChild(e2);
												RESULT = result;
											:} //{: RESULT = (e1 != e2) ? 1 : 0; :}
       | expr:e1 LESSER expr:e2           	{: 
												TreeNode result = new TreeNode("Lesser");
												result.addChild(e1);
												result.addChild(e2);
												RESULT = result;
											:} //{: RESULT = (e1 < e2) ? 1 : 0; :}
       | expr:e1 GREATER expr:e2           	{: 
												TreeNode result = new TreeNode("Greater");
												result.addChild(e1);
												result.addChild(e2);
												RESULT = result;
											:} //{: RESULT = (e1 > e2) ? 1 : 0; :}
       | expr:e1 LESSEQUAL expr:e2        	{: 
												TreeNode result = new TreeNode("Less Equal");
												result.addChild(e1);
												result.addChild(e2);
												RESULT = result;
											:} //{: RESULT = (e1 <= e2) ? 1 : 0; :}
       | expr:e1 GREATEQUAL expr:e2       	{: 
												TreeNode result = new TreeNode("Greater Equal");
												result.addChild(e1);
												result.addChild(e2);
												RESULT = result;
											:} //{: RESULT = (e1 >= e2) ? 1 : 0; :}
       | MINUS atom:a                     	{:	
												TreeNode result = new TreeNode("NEGATIVE");
												result.addChild(a);
												RESULT = result;
											:} //{: RESULT = -e; :} %prec UMINUS
       | atom:a                     		{:	
												TreeNode result = new TreeNode("ATOM");
												result.addChild(a);
												RESULT = result;
											:}
		;
             
/* Function call grammar */
atom		::=	INTLITERAL							{: 
															TreeNode result = new TreeNode("ATOM Int");
															RESULT = result;
													:}
			|	STRINGLITERAL						{: 
															TreeNode result = new TreeNode("ATOM String");
															RESULT = result;
													:}
			|	TRUE								{: 
															TreeNode result = new TreeNode("ATOM True");
															RESULT = result;
													:}
			|	FALSE								{: 
															TreeNode result = new TreeNode("ATOM False");
															RESULT = result;
													:}
			|	LPAREN	expr:e	RPAREN				{: 
															TreeNode result = new TreeNode("ATOM Expression");
															result.addChild(e);
															RESULT = result;
													:}
			|	fnCallExpr:fne						{: 
															TreeNode result = new TreeNode("ATOM Function Call");
															result.addChild(fne);
															RESULT = result;
													:}
			|	subscriptExpr:se					{: 
															TreeNode result = new TreeNode("ATOM Subscript");
															result.addChild(se);
															RESULT = result;
													:}
			|	id:i								{: 
															TreeNode result = new TreeNode("ATOM ID");
															result.addChild(i);
															RESULT = result;
													:}
            ;
            
fnCallExpr ::= id:i LPAREN RPAREN					{:  
															TreeNode result = new TreeNode("Function Call Expr");
															result.addChild(i);
															RESULT = result;
													:}
             | id:i LPAREN actualList:al RPAREN		{:  
															TreeNode result = new TreeNode("Function Call Expr with List");
															result.addChild(i);
															result.addChild(al);
															RESULT = result;
													:}
             ;
             
fnCallStmt ::= id:i LPAREN RPAREN					{:  
															TreeNode result = new TreeNode("Function Call Statement");
															result.addChild(i);
															RESULT = result;
													:}
             | id:i LPAREN actualList:al RPAREN		{:  
															TreeNode result = new TreeNode("Function Call Statement with List");
															result.addChild(i);
															result.addChild(al);
															RESULT = result;
													:}
             ;
             
actualList ::= expr:e								{: 
															TreeNode result = new TreeNode("Actual List");
															result.addChild(e);
															RESULT = result;
													:}
             | actualList:al COMMA expr:e			{: 
															TreeNode result = new TreeNode("Actual List");
															result.addChild(al);
															result.addChild(e);
															RESULT = result;
													:}
             ;
             
subscriptExpr ::= id:i LSQBRAKE expr:e RSQBRAKE		{: 
															TreeNode result = new TreeNode("Subscript");
															result.addChild(i);
															result.addChild(e);
															RESULT = result;
													:}
                ;
                
id			::= ID:i								{: 
															TreeNode result = new TreeNode("ID");
															result.addChild(new TreeNode(i));
															RESULT = result;
													:}
			;
       